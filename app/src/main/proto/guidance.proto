syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.chrisbesch.mcmissile.guidance";
option java_outer_classname = "GuidanceGRPC";

package mcmissile.guidance;

message Missile {
    string name = 1;
    int32 id = 2;
    int32 connectionId = 3;
    int32 budget = 4;
}

message MissileState {
    // may not change during flight
    Missile missile = 3;

    int32 time = 4;

    // only to be considered when not destroyed
    double posX = 5;
    double posY = 6;
    double posZ = 7;

    // only to be considered when not destroyed
    double velX = 8;
    double velY = 9;
    double velZ = 10;

    // only to be considered when not destroyed
    double pitch = 11;
    double yaw = 12;

    // only to be considered when not destroyed and targetLock and targetVisible
    double targetPosX = 13;
    double targetPosY = 15;
    double targetPosZ = 16;

    // only to be considered when not destroyed and targetLock and targetVisible
    double targetVelX = 17;
    double targetVelY = 18;
    double targetVelZ = 19;

    // only to be considered when not destroyed
    bool targetLock = 20;
    // only to be considered when not destroyed and targetLock
    bool targetVisible = 22;

    bool destroyed = 21;
}

message MissileHardwareConfig {
    // - sniper arrow without explosion (the faster the more damage)
    // - tnt (different strengths)
    // - effect (different types)
    // - inert
    // - anti-elytra (or anti-air, with anti-rocket)
    // - block-piercing
    enum Warhead {
        BLANK = 0;
        TNT_M = 1;
    }
    Warhead warhead = 1;

    // - movement stability (noise in rotation)
    // - rotation control speed
    // - flight ceiling?
    enum Airframe {
        DEFAULT_AIRFRAME = 0;
    }
    Airframe airframe = 2;

    // - burn duration, burn profile
    // - burn noise
    // - multi-stage
    enum Motor {
        SINGLE_STAGE_M = 0;
    }
    Motor motor = 3;

    // - time to live
    enum Battery {
        LI_ION_M = 0;
    }
    Battery battery = 4;

    // - lock types
    //     - lock-on at launch
    //     - lock-on after launch
    // - seeker types
    //     - specific entity type
    //     - any entity
    //     - specific block
    //     - block straight infront of missile at launch
    // - limitations
    //     - through blocks
    //     - blocked by blocks
    // - range
    // - angle
    // - accuracy
    // target requirements
    // - entity type
    // - player name
    // - block type
    enum Seeker {
        NO_SEEKER = 0;
        IR_SEEKER_M = 1;
    }
    Seeker seeker = 5;
    // you could set this to 'pig' for example
    // when you set this to '' (an empty string) all living entities will be targeted
    string seeker_entity_name = 9;

    // position/velocity accuracy
    enum InertialSystem {
        DEFAULT_IMU = 0;
    }
    InertialSystem inertialSystem = 6;
}

message ControlInput {
    // The guidance server sends ControlInput structs with increasing id.
    // The first ControlInput id is 1.
    // This is used to detect when Controlinput structs arrive too late or out of order.
    int32 id = 1;

    // only to be sent in first message
    MissileHardwareConfig hardwareConfig = 2;

    // only to be considered when not explode
    double pitchTurn = 3;
    double yawTurn = 4;

    bool explode = 5;
    bool disarm = 6;
}

message HealthRequest {
}

message HealthResponse {
}

service Guidance {
    rpc GetGuidance(stream MissileState) returns (stream ControlInput);
    rpc HealthCheck(HealthRequest) returns (HealthResponse);
}
